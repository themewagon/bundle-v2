{"version":3,"sources":["utils.js","detector.js","node.js","theme.js"],"names":["docReady","fn","document","readyState","addEventListener","setTimeout","isRTL","querySelector","getAttribute","resize","window","isIterableArray","array","Array","isArray","length","camelize","str","text","replace","match","capture","toUpperCase","concat","substr","toLowerCase","getData","el","data","JSON","parse","dataset","e","hexToRgb","hexValue","hex","indexOf","substring","result","exec","m","r","g","b","parseInt","rgbaColor","color","arguments","undefined","alpha","getColor","name","dom","documentElement","getComputedStyle","getPropertyValue","trim","getColors","primary","secondary","success","info","warning","danger","light","dark","white","black","emphasis","getGrays","100","200","300","400","500","600","700","800","900","1000","1100","hasClass","className","classList","value","includes","addClass","add","removeClass","remove","breakpoints","xs","sm","md","lg","xl","xxl","getOffset","rect","getBoundingClientRect","scrollLeft","pageXOffset","scrollTop","pageYOffset","top","left","getBreakpoint","breakpoint","classes","split","filter","cls","pop","getCurrentScreenBreakpoint","currentBreakpoint","innerWidth","breakpointStartVal","setCookie","expire","expires","Date","setTime","getTime","cookie","toUTCString","getCookie","keyValue","getItemFromStore","key","defaultValue","store","localStorage","getItem","_unused","setItemToStore","payload","setItem","getStoreSpace","parseFloat","escape","encodeURIComponent","stringify","toFixed","getDates","startDate","endDate","interval","from","v","i","valueOf","getRandomNumber","min","max","Math","floor","random","utils","detectorInit","is","html","opera","mobile","firefox","safari","ios","iphone","ipad","ie","edge","chrome","mac","windows","navigator","userAgent","DomNode","node","_classCallCheck","this","_createClass","isValidNode","toggle","contains","setAttribute","removeAttribute","event","cb","_","c"],"mappings":"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","file":"theme.min.js","sourcesContent":["/* -------------------------------------------------------------------------- */\n/*                                    Utils                                   */\n/* -------------------------------------------------------------------------- */\nconst docReady = fn => {\n  // see if DOM is already available\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', fn);\n  } else {\n    setTimeout(fn, 1);\n  }\n};\nconst isRTL = () => document.querySelector('html').getAttribute('dir') === 'rtl';\n\nconst resize = fn => window.addEventListener('resize', fn);\n\nconst isIterableArray = array => Array.isArray(array) && !!array.length;\n\nconst camelize = str => {\n  const text = str.replace(/[-_\\s.]+(.)?/g, (match, capture) => {\n    if (capture) {\n      return capture.toUpperCase();\n    }\n    return '';\n  });\n  return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\n};\n\nconst getData = (el, data) => {\n  try {\n    return JSON.parse(el.dataset[camelize(data)]);\n  } catch (e) {\n    return el.dataset[camelize(data)];\n  }\n};\n\n/* ----------------------------- Colors function ---------------------------- */\n\nconst hexToRgb = hexValue => {\n  let hex;\n  hexValue.indexOf('#') === 0 ? (hex = hexValue.substring(1)) : (hex = hexValue);\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(\n    hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b)\n  );\n  return result\n    ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]\n    : null;\n};\n\nconst rgbaColor = (color = '#fff', alpha = 0.5) => `rgba(${hexToRgb(color)}, ${alpha})`;\n\n/* --------------------------------- Colors --------------------------------- */\n\nconst getColor = (name, dom = document.documentElement) =>\n  getComputedStyle(dom).getPropertyValue(`--creative-bundle-${name}`).trim();\n\nconst getColors = dom => ({\n  primary: getColor('primary', dom),\n  secondary: getColor('secondary', dom),\n  success: getColor('success', dom),\n  info: getColor('info', dom),\n  warning: getColor('warning', dom),\n  danger: getColor('danger', dom),\n  light: getColor('light', dom),\n  dark: getColor('dark', dom),\n  white: getColor('white', dom),\n  black: getColor('black', dom),\n  emphasis: getColor('emphasis-color', dom)\n});\n\nconst getGrays = dom => ({\n  100: getColor('gray-100', dom),\n  200: getColor('gray-200', dom),\n  300: getColor('gray-300', dom),\n  400: getColor('gray-400', dom),\n  500: getColor('gray-500', dom),\n  600: getColor('gray-600', dom),\n  700: getColor('gray-700', dom),\n  800: getColor('gray-800', dom),\n  900: getColor('gray-900', dom),\n  1000: getColor('gray-1000', dom),\n  1100: getColor('gray-1100', dom)\n});\n\nconst hasClass = (el, className) => {\n  !el && false;\n  return el.classList.value.includes(className);\n};\n\nconst addClass = (el, className) => {\n  el.classList.add(className);\n};\n\nconst removeClass = (el, className) => {\n  el.classList.remove(className);\n};\n\nconst breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1540\n};\n\nconst getOffset = el => {\n  const rect = el.getBoundingClientRect();\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return { top: rect.top + scrollTop, left: rect.left + scrollLeft };\n};\n\nconst getBreakpoint = el => {\n  const classes = el && el.classList.value;\n  let breakpoint;\n  if (classes) {\n    breakpoint =\n      breakpoints[\n        classes\n          .split(' ')\n          .filter(cls => cls.includes('navbar-expand-'))\n          .pop()\n          .split('-')\n          .pop()\n      ];\n  }\n  return breakpoint;\n};\n\nconst getCurrentScreenBreakpoint = () => {\n\n  let currentBreakpoint = '';\n  if (window.innerWidth >= breakpoints.xl) {\n    currentBreakpoint = 'xl';\n  } else if (window.innerWidth >= breakpoints.lg) {\n    currentBreakpoint = 'lg';\n  } else if (window.innerWidth >= breakpoints.md) {\n    currentBreakpoint = 'md';\n  } else {\n    currentBreakpoint = 'sm';\n  }\n  const breakpointStartVal = breakpoints[currentBreakpoint];\n  return { currentBreakpoint, breakpointStartVal };\n};\n/* --------------------------------- Cookie --------------------------------- */\n\nconst setCookie = (name, value, expire) => {\n  const expires = new Date();\n  expires.setTime(expires.getTime() + expire);\n  document.cookie = `${name}=${value};expires=${expires.toUTCString()}`;\n};\n\nconst getCookie = name => {\n  const keyValue = document.cookie.match(`(^|;) ?${name}=([^;]*)(;|$)`);\n  return keyValue ? keyValue[2] : keyValue;\n};\n\n/* ---------------------------------- Store --------------------------------- */\n\nconst getItemFromStore = (key, defaultValue, store = localStorage) => {\n  try {\n    return JSON.parse(store.getItem(key)) || defaultValue;\n  } catch {\n    return store.getItem(key) || defaultValue;\n  }\n};\n\nconst setItemToStore = (key, payload, store = localStorage) => store.setItem(key, payload);\nconst getStoreSpace = (store = localStorage) =>\n  parseFloat((escape(encodeURIComponent(JSON.stringify(store))).length / (1024 * 1024)).toFixed(2));\n\n/* get Dates between */\n\nconst getDates = (startDate, endDate, interval = 1000 * 60 * 60 * 24) => {\n  const duration = endDate - startDate;\n  const steps = duration / interval;\n  return Array.from({ length: steps + 1 }, (v, i) => new Date(startDate.valueOf() + interval * i));\n};\n\n/* Get Random Number */\nconst getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\nconst utils = {\n  docReady,\n  breakpoints,\n  resize,\n  isIterableArray,\n  camelize,\n  getData,\n  hasClass,\n  addClass,\n  hexToRgb,\n  rgbaColor,\n  getColor,\n  getColors,\n  getGrays,\n  getOffset,\n  getBreakpoint,\n  setCookie,\n  getCookie,\n  getItemFromStore,\n  setItemToStore,\n  getStoreSpace,\n  getDates,\n  getRandomNumber,\n  removeClass,\n  getCurrentScreenBreakpoint,\n  isRTL\n};\n\nexport default utils;\n","import { addClass } from './utils';\n/* -------------------------------------------------------------------------- */\n/*                                  Detector                                  */\n/* -------------------------------------------------------------------------- */\n\nconst detectorInit = () => {\n  const { is } = window;\n  const html = document.querySelector('html');\n  is.opera() && addClass(html, 'opera');\n  is.mobile() && addClass(html, 'mobile');\n  is.firefox() && addClass(html, 'firefox');\n  is.safari() && addClass(html, 'safari');\n  is.ios() && addClass(html, 'ios');\n  is.iphone() && addClass(html, 'iphone');\n  is.ipad() && addClass(html, 'ipad');\n  is.ie() && addClass(html, 'ie');\n  is.edge() && addClass(html, 'edge');\n  is.chrome() && addClass(html, 'chrome');\n  is.mac() && addClass(html, 'osx');\n  is.windows() && addClass(html, 'windows');\n  navigator.userAgent.match('CriOS') && addClass(html, 'chrome');\n\n};\n\nexport default detectorInit;\n","/*-----------------------------------------------\r\n|   DomNode\r\n-----------------------------------------------*/\r\nclass DomNode {\r\n  constructor(node) {\r\n    this.node = node;\r\n  }\r\n\r\n  addClass(className) {\r\n    this.isValidNode() && this.node.classList.add(className);\r\n  }\r\n\r\n  removeClass(className) {\r\n    this.isValidNode() && this.node.classList.remove(className);\r\n  }\r\n\r\n  toggleClass(className) {\r\n    this.isValidNode() && this.node.classList.toggle(className);\r\n  }\r\n\r\n  hasClass(className) {\r\n    this.isValidNode() && this.node.classList.contains(className);\r\n  }\r\n\r\n  data(key) {\r\n    if (this.isValidNode()) {\r\n      try {\r\n        return JSON.parse(this.node.dataset[this.camelize(key)]);\r\n      } catch (e) {\r\n        return this.node.dataset[this.camelize(key)];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  attr(name) {\r\n    return this.isValidNode() && this.node[name];\r\n  }\r\n\r\n  setAttribute(name, value) {\r\n    this.isValidNode() && this.node.setAttribute(name, value);\r\n  }\r\n\r\n  removeAttribute(name) {\r\n    this.isValidNode() && this.node.removeAttribute(name);\r\n  }\r\n\r\n  setProp(name, value) {\r\n    this.isValidNode() && (this.node[name] = value);\r\n  }\r\n\r\n  on(event, cb) {\r\n    this.isValidNode() && this.node.addEventListener(event, cb);\r\n  }\r\n\r\n  isValidNode() {\r\n    return !!this.node;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  camelize(str) {\r\n    const text = str.replace(/[-_\\s.]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));\r\n    return `${text.substr(0, 1).toLowerCase()}${text.substr(1)}`;\r\n  }\r\n}\r\n\r\nexport default DomNode;\r\n","import { docReady } from './utils';\nimport detectorInit from './detector';\n\n/* -------------------------------------------------------------------------- */\n/*                            Theme Initialization                            */\n/* -------------------------------------------------------------------------- */\n\ndocReady(detectorInit);\n"]}